!function(){"use strict";angular.module("cityTalk",["ui.router"]).constant("geoApiUrl","https://maps.googleapis.com/maps/api/geocode/json?latlng=")}();
!function(){"use strict";function t(t,r){r.otherwise("/start"),t.state("start",{url:"/start",templateUrl:"views/start.html",controller:"startController as start"}).state("find",{url:"/find",templateUrl:"views/find.html",controller:"findChatController as find"}).state("chat",{url:"/chat",templateUrl:"views/chat.html",controller:"chatController as chat",params:{data:null}})}angular.module("cityTalk").config(t),t.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function o(o){var e=this;e.userName=localStorage.userName||"",e.setUserName=function(e){localStorage.userName=e.replace(/(<([^>]+)>)/gi,""),o.go("find")}}function e(o,e,t){var a=this;a.locationDenied=!1,a.userName=localStorage.userName||"",a.userLocation="world",a.userPreferredLocation="world",a.userLabel="",a.init=function(){""===a.userName&&o.go("start"),a.setCity()},a.setCity=function(){t.getCity().then(function(o){a.userLocation=o,a.locationError=""}).catch(function(o){console.log(o),a.locationError="Allow using location to find your city",a.locationDenied=!0})},a.startChat=function(){console.log("start chat"),console.log("userName",a.userName),console.log("location",a.userLocation),console.log("userPreferredLocation",a.userPreferredLocation),console.log("label",a.userLabel);var t="http://localhost:3000";e.post(t+"/findchat",{userName:a.userName,userLocation:"world"===a.userPreferredLocation?"world":a.userLocation,userLabel:""===a.userLabel?"label":a.userLabel.trim()}).then(function(e){console.log(e.data),o.go("chat",{data:{room:e.data.room,status:e.data.status,userName:a.userName,userLocation:a.userLocation}})})},a.init()}function t(o,e,t){var a=this;o.params.data||o.go("find"),a.userName=o.params.data.userName,a.userLocation=o.params.data.userLocation,a.room=o.params.data.room,a.message="",a.chatStarted=!1;var r=io();r.on("connect",function(){r.emit("join room","userRoom_"+a.room)}),r.on("start",function(o){e.$apply(function(){a.chatStarted=!0})}),a.sendMessage=function(){console.log("sendmesage",a.message);var o={user:a.userName,text:a.message};r.emit("chat message",o),a.message=""},r.on("chat message",function(o){console.log("message: "+o),e.$broadcast("citytalk:incoming-msg",o)})}angular.module("cityTalk").controller("startController",o).controller("findChatController",e).controller("chatController",t),o.$inject=["$state"],e.$inject=["$state","$http","locationService"],t.$inject=["$state","$scope","$rootScope"]}();
!function(){"use strict";function s(){return{templateUrl:"views/components/header.html",bindings:{userName:"@",userLocation:"@"}}}function e(){return{templateUrl:"views/components/start-form.html",controller:t,bindings:{setUserName:"&",userName:"@"}}}function t(){var s=this;s.isNameValid=function(s){return s.trim().length}}function n(){return{templateUrl:"views/components/find-form.html",bindings:{startChat:"&",locationDenied:"<",label:"=",preferredLocation:"="}}}function a(){return{templateUrl:"views/components/chat-form.html",controller:o,bindings:{message:"=",chatStarted:"<",sendMessage:"&",userName:"@"}}}function o(s,e){var t=this;t.chatBox=e.find("#chat-box"),s.$on("citytalk:incoming-msg",function(s,e){t.addIncomingMessage(e)}),t.sendOutMessage=function(){t.message.length>0&&(t.addOutgoingMessage(),t.sendMessage())},t.addIncomingMessage=function(s){var e=new Date;e=e.getHours()+":"+e.getMinutes()+":"+e.getSeconds(),t.chatBox.append('<p class="msg msg--in"><span class="msg__user text-info">'+s.user+'</span><span class="msg__text">'+s.text+'</span><span class="msg__time text-info">'+e+"</span></p>"),console.log("---------------------------------"),console.log('<p class="msg msg--in"><span class="msg__user text-info">'+s.user+'</span><span class="msg__text">'+s.text+'</span><span class="msg__time text-info">'+e+"</span></p>"),console.log("**************************************"),t.chatBox[0].scrollTop=t.chatBox[0].scrollHeight},t.addOutgoingMessage=function(){var s=new Date;s=s.getHours()+":"+s.getMinutes()+":"+s.getSeconds(),t.chatBox.append('<p class="msg msg--out"><span class="msg__user text-info">'+t.userName+'</span><span class="msg__text">'+t.message+'</span><span class="msg__time text-info">'+s+"</span></p>"),t.chatBox[0].scrollTop=t.chatBox[0].scrollHeight}}angular.module("cityTalk").component("startForm",e()).component("findForm",n()).component("cityTalkHeader",s()).component("chatForm",a()),o.$inject=["$scope","$element"]}();
!function(){"use strict";function t(t,e,o){var n=this;n.getCity=function(){function n(e){t({url:o+e.coords.latitude+"%2C"+e.coords.longitude+"&language=en"}).then(function(t){var e=t.data.results,o="world";for(var n in e)if("locality"===e[n].address_components[0].types[0]){o=e[n].address_components[0].long_name;break}i.resolve(o)})}function r(t){i.reject(t)}if(!navigator.geolocation)return!1;var i=e.defer();return navigator.geolocation.getCurrentPosition(n,r),i.promise}}angular.module("cityTalk").service("locationService",t),t.$inject=["$http","$q","geoApiUrl"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
