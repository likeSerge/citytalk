"use strict";!function(){angular.module("cityTalk",["ui.router","ngStorage"])}();
"use strict";!function(){function t(t,r){r.otherwise("/start"),t.state("start",{url:"/start",templateUrl:"views/start.html",controller:"startController as start"}).state("find",{url:"/find",templateUrl:"views/find.html",controller:"findChatController as find"}).state("chat",{url:"/chat",templateUrl:"views/chat.html",controller:"chatController as chat",params:{data:null}})}angular.module("cityTalk").config(t),t.$inject=["$stateProvider","$urlRouterProvider"]}();
"use strict";!function(){angular.module("cityTalk").constant("citytalkApiUrl","http://localhost:3000/").constant("geoApiUrl","https://maps.googleapis.com/maps/api/geocode/json?latlng=")}();
"use strict";!function(){function t(t,e){var o=this;o.userName=e.userName||"",o.setValidUserName=function(t){var a=t.replace(/(<([^>]+)>)/gi,"");o.userName=a,e.userName=a},o.setNameAndChangeState=function(e){o.setValidUserName(e),t.go("find")}}function e(t,e,o,a,r){var n=this;n.locationDenied=!1,n.locationError="",n.userName=o.userName||"",n.userLocation="world",n.userPreferredLocation="world",n.userLabel="",n.init=function(){""===n.userName?t.go("start"):n.setCity()},n.setCity=function(){a.getCity().then(function(t){n.userLocation=t,n.locationError=""}).catch(function(t){console.log(t),n.locationError="Allow using location to find your city",n.locationDenied=!0})},n.startChat=function(){e.post(r+"findchat",{userName:n.userName,userLocation:"world"===n.userPreferredLocation?"world":n.userLocation,userLabel:""===n.userLabel?"label":n.userLabel.trim()}).then(function(e){t.go("chat",{data:{room:e.data.room,status:e.data.status,userName:n.userName,userLocation:n.userLocation}})})},n.init()}function o(t,e,o,a){var r=this;r.init=function(){t.params.data?(r.userName=t.params.data.userName,r.userLocation=t.params.data.userLocation,r.room=t.params.data.room,r.message="",r.chatStarted=!1,a.init(),a.on("connect",function(){a.emit("join room","userRoom_"+r.room)}),a.on("start",function(t){r.chatStarted=!0}),a.on("chat message",function(t){e.$broadcast("citytalk:incoming-msg",t)})):t.go("find")},r.init(),r.sendMessage=function(){var t={user:r.userName,text:r.message};a.emit("chat message",t),r.message=""}}angular.module("cityTalk").controller("startController",t).controller("findChatController",e).controller("chatController",o),t.$inject=["$state","$localStorage"],e.$inject=["$state","$http","$localStorage","locationService","citytalkApiUrl"],o.$inject=["$state","$scope","$rootScope","socketService"]}();
"use strict";!function(){function e(){return{templateUrl:"views/components/header.html",bindings:{userName:"@",userLocation:"@"}}}function n(){return{templateUrl:"views/components/start-form.html",controller:t,bindings:{setNameAndChangeState:"&",userName:"@"}}}function t(){var e=this;e.isNameValid=function(e){return e.trim().length}}function s(){return{templateUrl:"views/components/find-form.html",bindings:{startChat:"&",locationDenied:"<",label:"=",preferredLocation:"="}}}function a(){return{templateUrl:"views/components/chat-form.html",controller:o,bindings:{message:"=",chatStarted:"<",sendMessage:"&",userName:"@"}}}function o(e,n){var t=this;t.chatBox=n.find("#chat-box"),e.$on("citytalk:incoming-msg",function(e,n){t.addIncomingMessage(n)}),t.sendOutMessage=function(){t.message.length>0&&(t.addOutgoingMessage(),t.sendMessage())},t.addIncomingMessage=function(e){var n=new Date;n=n.getHours()+":"+n.getMinutes()+":"+n.getSeconds(),t.chatBox.append('<p class="msg msg--in">\n                    <span class="msg__user text-info">'+e.user+'</span>\n                    <span class="msg__text">'+e.text+'</span>\n                    <span class="msg__time text-info">'+n+"</span>\n                </p>"),t.chatBox[0].scrollTop=t.chatBox[0].scrollHeight},t.addOutgoingMessage=function(){var e=new Date;e=e.getHours()+":"+e.getMinutes()+":"+e.getSeconds(),t.chatBox.append('<p class="msg msg--out">\n                    <span class="msg__user text-info">'+t.userName+'</span>\n                    <span class="msg__text">'+t.message+'</span>\n                    <span class="msg__time text-info">'+e+"</span>\n                </p>"),t.chatBox[0].scrollTop=t.chatBox[0].scrollHeight}}angular.module("cityTalk").component("startForm",n()).component("findForm",s()).component("cityTalkHeader",e()).component("chatForm",a()),o.$inject=["$scope","$element"]}();
"use strict";!function(){function n(n,t,o){var i=this;i.getCity=function(){function i(t){n({url:o+t.coords.latitude+"%2C"+t.coords.longitude+"&language=en"}).then(function(n){var t=n.data.results,o="world";for(var i in t)if("locality"===t[i].address_components[0].types[0]){o=t[i].address_components[0].long_name;break}r.resolve(o)})}function e(n){r.reject(n)}if(!navigator.geolocation)return!1;var r=t.defer();return navigator.geolocation.getCurrentPosition(i,e),r.promise}}function t(n){var t=this,o={};t.init=function(){o=io()},t.on=function(t,i){o.on(t,function(){var t=arguments;n.$apply(function(){i.apply(o,t)})})},t.emit=function(t,i,e){o.emit(t,i,function(){var t=arguments;n.$apply(function(){e&&e.apply(o,t)})})}}angular.module("cityTalk").service("locationService",n).service("socketService",t),n.$inject=["$http","$q","geoApiUrl"],t.$inject=["$rootScope"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
