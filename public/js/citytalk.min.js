"use strict";!function(){angular.module("cityTalk",["ui.router"])}();
"use strict";!function(){function t(t,r){r.otherwise("/start"),t.state("start",{url:"/start",templateUrl:"views/start.html",controller:"startController as start"}).state("find",{url:"/find",templateUrl:"views/find.html",controller:"findChatController as find"}).state("chat",{url:"/chat",templateUrl:"views/chat.html",controller:"chatController as chat",params:{data:null}})}angular.module("cityTalk").config(t),t.$inject=["$stateProvider","$urlRouterProvider"]}();
"use strict";!function(){angular.module("cityTalk").constant("citytalkApiUrl","http://localhost:3000/").constant("geoApiUrl","https://maps.googleapis.com/maps/api/geocode/json?latlng=")}();
"use strict";!function(){function o(o){var e=this;e.userName=localStorage.userName||"",e.setUserName=function(e){localStorage.userName=e.replace(/(<([^>]+)>)/gi,""),o.go("find")}}function e(o,e,t,a){var r=this;r.locationDenied=!1,r.userName=localStorage.userName||"",r.userLocation="world",r.userPreferredLocation="world",r.userLabel="",r.init=function(){""===r.userName&&o.go("start"),r.setCity()},r.setCity=function(){t.getCity().then(function(o){r.userLocation=o,r.locationError=""}).catch(function(o){console.log(o),r.locationError="Allow using location to find your city",r.locationDenied=!0})},r.startChat=function(){console.log("start chat"),console.log("userName",r.userName),console.log("location",r.userLocation),console.log("userPreferredLocation",r.userPreferredLocation),console.log("label",r.userLabel),e.post(a+"findchat",{userName:r.userName,userLocation:"world"===r.userPreferredLocation?"world":r.userLocation,userLabel:""===r.userLabel?"label":r.userLabel.trim()}).then(function(e){console.log(e.data),o.go("chat",{data:{room:e.data.room,status:e.data.status,userName:r.userName,userLocation:r.userLocation}})})},r.init()}function t(o,e,t){var a=this;o.params.data||o.go("find"),a.userName=o.params.data.userName,a.userLocation=o.params.data.userLocation,a.room=o.params.data.room,a.message="",a.chatStarted=!1;var r=io();r.on("connect",function(){r.emit("join room","userRoom_"+a.room)}),r.on("start",function(o){e.$apply(function(){a.chatStarted=!0})}),a.sendMessage=function(){console.log("sendmesage",a.message);var o={user:a.userName,text:a.message};r.emit("chat message",o),a.message=""},r.on("chat message",function(o){console.log("message: "+o),e.$broadcast("citytalk:incoming-msg",o)})}angular.module("cityTalk").controller("startController",o).controller("findChatController",e).controller("chatController",t),o.$inject=["$state"],e.$inject=["$state","$http","locationService","citytalkApiUrl"],t.$inject=["$state","$scope","$rootScope"]}();
"use strict";!function(){function e(){return{templateUrl:"views/components/header.html",bindings:{userName:"@",userLocation:"@"}}}function n(){return{templateUrl:"views/components/start-form.html",controller:t,bindings:{setUserName:"&",userName:"@"}}}function t(){var e=this;e.isNameValid=function(e){return e.trim().length}}function s(){return{templateUrl:"views/components/find-form.html",bindings:{startChat:"&",locationDenied:"<",label:"=",preferredLocation:"="}}}function a(){return{templateUrl:"views/components/chat-form.html",controller:o,bindings:{message:"=",chatStarted:"<",sendMessage:"&",userName:"@"}}}function o(e,n){var t=this;t.chatBox=n.find("#chat-box"),e.$on("citytalk:incoming-msg",function(e,n){t.addIncomingMessage(n)}),t.sendOutMessage=function(){t.message.length>0&&(t.addOutgoingMessage(),t.sendMessage())},t.addIncomingMessage=function(e){var n=new Date;n=n.getHours()+":"+n.getMinutes()+":"+n.getSeconds(),t.chatBox.append('<p class="msg msg--in">\n                    <span class="msg__user text-info">'+e.user+'</span>\n                    <span class="msg__text">'+e.text+'</span>\n                    <span class="msg__time text-info">'+n+"</span>\n                </p>"),t.chatBox[0].scrollTop=t.chatBox[0].scrollHeight},t.addOutgoingMessage=function(){var e=new Date;e=e.getHours()+":"+e.getMinutes()+":"+e.getSeconds(),t.chatBox.append('<p class="msg msg--out">\n                    <span class="msg__user text-info">'+t.userName+'</span>\n                    <span class="msg__text">'+t.message+'</span>\n                    <span class="msg__time text-info">'+e+"</span>\n                </p>"),t.chatBox[0].scrollTop=t.chatBox[0].scrollHeight}}angular.module("cityTalk").component("startForm",n()).component("findForm",s()).component("cityTalkHeader",e()).component("chatForm",a()),o.$inject=["$scope","$element"]}();
"use strict";!function(){function t(t,e,o){var n=this;n.getCity=function(){function n(e){t({url:o+e.coords.latitude+"%2C"+e.coords.longitude+"&language=en"}).then(function(t){var e=t.data.results,o="world";for(var n in e)if("locality"===e[n].address_components[0].types[0]){o=e[n].address_components[0].long_name;break}i.resolve(o)})}function r(t){i.reject(t)}if(!navigator.geolocation)return!1;var i=e.defer();return navigator.geolocation.getCurrentPosition(n,r),i.promise}}angular.module("cityTalk").service("locationService",t),t.$inject=["$http","$q","geoApiUrl"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
